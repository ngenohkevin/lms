// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: audit_logs.sql

package queries

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAuditLogs = `-- name: CountAuditLogs :one
SELECT COUNT(*) FROM audit_logs
`

func (q *Queries) CountAuditLogs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAuditLogs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAuditLogsByTable = `-- name: CountAuditLogsByTable :one
SELECT COUNT(*) FROM audit_logs
WHERE table_name = $1
`

func (q *Queries) CountAuditLogsByTable(ctx context.Context, tableName string) (int64, error) {
	row := q.db.QueryRow(ctx, countAuditLogsByTable, tableName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuditLog = `-- name: CreateAuditLog :exec
INSERT INTO audit_logs (table_name, record_id, action, old_values, new_values, user_id, user_type, ip_address, user_agent)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateAuditLogParams struct {
	TableName string      `db:"table_name" json:"table_name"`
	RecordID  int32       `db:"record_id" json:"record_id"`
	Action    string      `db:"action" json:"action"`
	OldValues []byte      `db:"old_values" json:"old_values"`
	NewValues []byte      `db:"new_values" json:"new_values"`
	UserID    pgtype.Int4 `db:"user_id" json:"user_id"`
	UserType  pgtype.Text `db:"user_type" json:"user_type"`
	IpAddress *netip.Addr `db:"ip_address" json:"ip_address"`
	UserAgent pgtype.Text `db:"user_agent" json:"user_agent"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) error {
	_, err := q.db.Exec(ctx, createAuditLog,
		arg.TableName,
		arg.RecordID,
		arg.Action,
		arg.OldValues,
		arg.NewValues,
		arg.UserID,
		arg.UserType,
		arg.IpAddress,
		arg.UserAgent,
	)
	return err
}

const deleteOldAuditLogs = `-- name: DeleteOldAuditLogs :exec
DELETE FROM audit_logs
WHERE created_at < $1
`

func (q *Queries) DeleteOldAuditLogs(ctx context.Context, createdAt pgtype.Timestamp) error {
	_, err := q.db.Exec(ctx, deleteOldAuditLogs, createdAt)
	return err
}

const listAuditLogs = `-- name: ListAuditLogs :many
SELECT id, table_name, record_id, action, old_values, new_values, user_id, user_type, ip_address, user_agent, created_at FROM audit_logs
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAuditLogsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListAuditLogs(ctx context.Context, arg ListAuditLogsParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.TableName,
			&i.RecordID,
			&i.Action,
			&i.OldValues,
			&i.NewValues,
			&i.UserID,
			&i.UserType,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuditLogsByAction = `-- name: ListAuditLogsByAction :many
SELECT id, table_name, record_id, action, old_values, new_values, user_id, user_type, ip_address, user_agent, created_at FROM audit_logs
WHERE action = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListAuditLogsByActionParams struct {
	Action string `db:"action" json:"action"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

func (q *Queries) ListAuditLogsByAction(ctx context.Context, arg ListAuditLogsByActionParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogsByAction, arg.Action, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.TableName,
			&i.RecordID,
			&i.Action,
			&i.OldValues,
			&i.NewValues,
			&i.UserID,
			&i.UserType,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuditLogsByDateRange = `-- name: ListAuditLogsByDateRange :many
SELECT id, table_name, record_id, action, old_values, new_values, user_id, user_type, ip_address, user_agent, created_at FROM audit_logs
WHERE created_at >= $1 AND created_at <= $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListAuditLogsByDateRangeParams struct {
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	CreatedAt_2 pgtype.Timestamp `db:"created_at_2" json:"created_at_2"`
	Limit       int32            `db:"limit" json:"limit"`
	Offset      int32            `db:"offset" json:"offset"`
}

func (q *Queries) ListAuditLogsByDateRange(ctx context.Context, arg ListAuditLogsByDateRangeParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogsByDateRange,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.TableName,
			&i.RecordID,
			&i.Action,
			&i.OldValues,
			&i.NewValues,
			&i.UserID,
			&i.UserType,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuditLogsByRecord = `-- name: ListAuditLogsByRecord :many
SELECT id, table_name, record_id, action, old_values, new_values, user_id, user_type, ip_address, user_agent, created_at FROM audit_logs
WHERE table_name = $1 AND record_id = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListAuditLogsByRecordParams struct {
	TableName string `db:"table_name" json:"table_name"`
	RecordID  int32  `db:"record_id" json:"record_id"`
	Limit     int32  `db:"limit" json:"limit"`
	Offset    int32  `db:"offset" json:"offset"`
}

func (q *Queries) ListAuditLogsByRecord(ctx context.Context, arg ListAuditLogsByRecordParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogsByRecord,
		arg.TableName,
		arg.RecordID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.TableName,
			&i.RecordID,
			&i.Action,
			&i.OldValues,
			&i.NewValues,
			&i.UserID,
			&i.UserType,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuditLogsByTable = `-- name: ListAuditLogsByTable :many
SELECT id, table_name, record_id, action, old_values, new_values, user_id, user_type, ip_address, user_agent, created_at FROM audit_logs
WHERE table_name = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListAuditLogsByTableParams struct {
	TableName string `db:"table_name" json:"table_name"`
	Limit     int32  `db:"limit" json:"limit"`
	Offset    int32  `db:"offset" json:"offset"`
}

func (q *Queries) ListAuditLogsByTable(ctx context.Context, arg ListAuditLogsByTableParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogsByTable, arg.TableName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.TableName,
			&i.RecordID,
			&i.Action,
			&i.OldValues,
			&i.NewValues,
			&i.UserID,
			&i.UserType,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuditLogsByUser = `-- name: ListAuditLogsByUser :many
SELECT id, table_name, record_id, action, old_values, new_values, user_id, user_type, ip_address, user_agent, created_at FROM audit_logs
WHERE user_id = $1 AND user_type = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListAuditLogsByUserParams struct {
	UserID   pgtype.Int4 `db:"user_id" json:"user_id"`
	UserType pgtype.Text `db:"user_type" json:"user_type"`
	Limit    int32       `db:"limit" json:"limit"`
	Offset   int32       `db:"offset" json:"offset"`
}

func (q *Queries) ListAuditLogsByUser(ctx context.Context, arg ListAuditLogsByUserParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogsByUser,
		arg.UserID,
		arg.UserType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.TableName,
			&i.RecordID,
			&i.Action,
			&i.OldValues,
			&i.NewValues,
			&i.UserID,
			&i.UserType,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
