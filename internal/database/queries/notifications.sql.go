// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notifications.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countNotificationsByType = `-- name: CountNotificationsByType :one
SELECT COUNT(*) FROM notifications
WHERE type = $1
`

func (q *Queries) CountNotificationsByType(ctx context.Context, type_ string) (int64, error) {
	row := q.db.QueryRow(ctx, countNotificationsByType, type_)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUnreadNotificationsByRecipient = `-- name: CountUnreadNotificationsByRecipient :one
SELECT COUNT(*) FROM notifications
WHERE recipient_id = $1 AND recipient_type = $2 AND is_read = false
`

type CountUnreadNotificationsByRecipientParams struct {
	RecipientID   int32  `db:"recipient_id" json:"recipient_id"`
	RecipientType string `db:"recipient_type" json:"recipient_type"`
}

func (q *Queries) CountUnreadNotificationsByRecipient(ctx context.Context, arg CountUnreadNotificationsByRecipientParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUnreadNotificationsByRecipient, arg.RecipientID, arg.RecipientType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (recipient_id, recipient_type, type, title, message)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, recipient_id, recipient_type, type, title, message, is_read, sent_at, created_at
`

type CreateNotificationParams struct {
	RecipientID   int32  `db:"recipient_id" json:"recipient_id"`
	RecipientType string `db:"recipient_type" json:"recipient_type"`
	Type          string `db:"type" json:"type"`
	Title         string `db:"title" json:"title"`
	Message       string `db:"message" json:"message"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification,
		arg.RecipientID,
		arg.RecipientType,
		arg.Type,
		arg.Title,
		arg.Message,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.RecipientID,
		&i.RecipientType,
		&i.Type,
		&i.Title,
		&i.Message,
		&i.IsRead,
		&i.SentAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteNotification, id)
	return err
}

const deleteOldNotifications = `-- name: DeleteOldNotifications :exec
DELETE FROM notifications
WHERE created_at < $1 AND is_read = true
`

func (q *Queries) DeleteOldNotifications(ctx context.Context, createdAt pgtype.Timestamp) error {
	_, err := q.db.Exec(ctx, deleteOldNotifications, createdAt)
	return err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, recipient_id, recipient_type, type, title, message, is_read, sent_at, created_at FROM notifications
WHERE id = $1
`

func (q *Queries) GetNotificationByID(ctx context.Context, id int32) (Notification, error) {
	row := q.db.QueryRow(ctx, getNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.RecipientID,
		&i.RecipientType,
		&i.Type,
		&i.Title,
		&i.Message,
		&i.IsRead,
		&i.SentAt,
		&i.CreatedAt,
	)
	return i, err
}

const listNotifications = `-- name: ListNotifications :many
SELECT id, recipient_id, recipient_type, type, title, message, is_read, sent_at, created_at FROM notifications
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListNotificationsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListNotifications(ctx context.Context, arg ListNotificationsParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, listNotifications, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.RecipientID,
			&i.RecipientType,
			&i.Type,
			&i.Title,
			&i.Message,
			&i.IsRead,
			&i.SentAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotificationsByRecipient = `-- name: ListNotificationsByRecipient :many
SELECT id, recipient_id, recipient_type, type, title, message, is_read, sent_at, created_at FROM notifications
WHERE recipient_id = $1 AND recipient_type = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListNotificationsByRecipientParams struct {
	RecipientID   int32  `db:"recipient_id" json:"recipient_id"`
	RecipientType string `db:"recipient_type" json:"recipient_type"`
	Limit         int32  `db:"limit" json:"limit"`
	Offset        int32  `db:"offset" json:"offset"`
}

func (q *Queries) ListNotificationsByRecipient(ctx context.Context, arg ListNotificationsByRecipientParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, listNotificationsByRecipient,
		arg.RecipientID,
		arg.RecipientType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.RecipientID,
			&i.RecipientType,
			&i.Type,
			&i.Title,
			&i.Message,
			&i.IsRead,
			&i.SentAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotificationsByType = `-- name: ListNotificationsByType :many
SELECT id, recipient_id, recipient_type, type, title, message, is_read, sent_at, created_at FROM notifications
WHERE type = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListNotificationsByTypeParams struct {
	Type   string `db:"type" json:"type"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

func (q *Queries) ListNotificationsByType(ctx context.Context, arg ListNotificationsByTypeParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, listNotificationsByType, arg.Type, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.RecipientID,
			&i.RecipientType,
			&i.Type,
			&i.Title,
			&i.Message,
			&i.IsRead,
			&i.SentAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnreadNotificationsByRecipient = `-- name: ListUnreadNotificationsByRecipient :many
SELECT id, recipient_id, recipient_type, type, title, message, is_read, sent_at, created_at FROM notifications
WHERE recipient_id = $1 AND recipient_type = $2 AND is_read = false
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListUnreadNotificationsByRecipientParams struct {
	RecipientID   int32  `db:"recipient_id" json:"recipient_id"`
	RecipientType string `db:"recipient_type" json:"recipient_type"`
	Limit         int32  `db:"limit" json:"limit"`
	Offset        int32  `db:"offset" json:"offset"`
}

func (q *Queries) ListUnreadNotificationsByRecipient(ctx context.Context, arg ListUnreadNotificationsByRecipientParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, listUnreadNotificationsByRecipient,
		arg.RecipientID,
		arg.RecipientType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.RecipientID,
			&i.RecipientType,
			&i.Type,
			&i.Title,
			&i.Message,
			&i.IsRead,
			&i.SentAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnsentNotifications = `-- name: ListUnsentNotifications :many
SELECT id, recipient_id, recipient_type, type, title, message, is_read, sent_at, created_at FROM notifications
WHERE sent_at IS NULL
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) ListUnsentNotifications(ctx context.Context, limit int32) ([]Notification, error) {
	rows, err := q.db.Query(ctx, listUnsentNotifications, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.RecipientID,
			&i.RecipientType,
			&i.Type,
			&i.Title,
			&i.Message,
			&i.IsRead,
			&i.SentAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markNotificationAsRead = `-- name: MarkNotificationAsRead :exec
UPDATE notifications
SET is_read = true
WHERE id = $1
`

func (q *Queries) MarkNotificationAsRead(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markNotificationAsRead, id)
	return err
}

const markNotificationAsSent = `-- name: MarkNotificationAsSent :exec
UPDATE notifications
SET sent_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkNotificationAsSent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markNotificationAsSent, id)
	return err
}
