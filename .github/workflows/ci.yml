name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'phase-*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: lms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

    - name: Run golangci-lint
      run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lms_test?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
        LMS_SERVER_MODE: test
        LMS_JWT_SECRET: test-secret-key
        LMS_JWT_REFRESH_SECRET: test-refresh-secret
      run: |
        go test -v -race -coverprofile=coverage.out ./...

    - name: Generate test coverage
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push'
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Build
      run: go build -v -o build/lms-server cmd/server/main.go

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt json -out gosec-report.json ./...'

    - name: Upload Gosec results
      uses: actions/upload-artifact@v3
      with:
        name: gosec-results
        path: gosec-report.json

  build-and-deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build for production
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o build/lms-server cmd/server/main.go

    - name: Build Docker image
      run: |
        docker build -t lms-backend:${{ github.sha }} .
        docker tag lms-backend:${{ github.sha }} lms-backend:latest

    - name: Log in to Docker Hub
      if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub
      if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
      run: |
        docker tag lms-backend:latest ${{ secrets.DOCKER_USERNAME }}/lms-backend:latest
        docker tag lms-backend:latest ${{ secrets.DOCKER_USERNAME }}/lms-backend:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/lms-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/lms-backend:${{ github.sha }}

    # Add deployment steps here when ready
    # - name: Deploy to production
    #   run: |
    #     # Add your deployment commands here